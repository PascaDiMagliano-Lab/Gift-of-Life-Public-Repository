# Read in the VCF file
vcf <- readCollapsedVCF("/Volumes/umms-angelesc/Novogene_Mouse_WES/03.Variant_and_Annotation/Somatic/Somatic_INDEL/Annotation/N1010D.Strelka.somatic.indel.mm10_multianno.vcf")
library(vcfR)
BiocManager::install('vcfR')
library(vcfR)
# Read in the VCF file
vcf <- read.vcf("/Volumes/umms-angelesc/Novogene_Mouse_WES/03.Variant_and_Annotation/Somatic/Somatic_INDEL/Annotation/N1010D.Strelka.somatic.indel.mm10_multianno.vcf")
library(vcfR)
# Read in the VCF file
vcf <- vcfR::read.vcfR("/Volumes/umms-angelesc/Novogene_Mouse_WES/03.Variant_and_Annotation/Somatic/Somatic_INDEL/Annotation/N1010D.Strelka.somatic.indel.mm10_multianno.vcf")
# Convert the VCF file to a MAF file
maf <- vcfR2maf(vcf)
# Convert the VCF file to a MAF file
maf <- vcf2maf(vcf)
vcf
View(vcf)
annovarToMaf(vcf)
setwd("~/Desktop")
system("git clone git@github.com:PascaDiMagliano-Lab/Gift-of-Life-Public-Repository.git")
library(SoupX)
?load10X
setwd("~/Gift-of-Life-Public-Repository/scripts/Data_Processing")
suppressPackageStartupMessages({
library(Seurat)
library(parallel)
library(ggplot2)
library(cowplot)
library(grid)
library(gridExtra)
source("../../src/correct_reads_function.r")
})
samples_names <- list.files("../../data/samples/")
samples_dir <- list.files("../../data/samples/", full.names = T)
samples_dir
samples_dir <- list.files("../../data/GSE229413_RAW/", full.names = T)
samples_dir
samples_names <- list.files("../../data/GSE229413_RAW")
samples_dir <- list.files("../../data/GSE229413_RAW", full.names = T)
samples_names
samples_names <- list.files("../../data/GSE229413_RAW") %>%
gsub(pattern = "_filtered_feature_bc_matrix.h5|_raw_feature_bc_matrix.h5|^GSM[1-9]*_", replacement = "")
library(tidyverse)
samples_names <- list.files("../../data/GSE229413_RAW") %>%
gsub(pattern = "_filtered_feature_bc_matrix.h5|_raw_feature_bc_matrix.h5|^GSM[1-9]*_", replacement = "")
samples_names
samples_dir <- list.files("../../data/GSE229413_RAW", full.names = T)
source("~/Gift-of-Life-Public-Repository/scripts/Data_Processing/01_ambient_RNA_correction.R", echo=TRUE)
samples_names <- list.files("../../data/GSE229413_RAW") %>%
gsub(pattern = "_filtered_feature_bc_matrix.h5|_raw_feature_bc_matrix.h5|^GSM[0-9]*_", replacement = "")
samples_names
samples_names <- list.files("../../data/GSE229413_RAW") %>%
gsub(pattern = "_filtered_feature_bc_matrix.h5|_raw_feature_bc_matrix.h5|^GSM[0-9]*_", replacement = "")
samples_dir <- list.files("../../data/GSE229413_RAW", full.names = T)
samples_dir
samples_names <- list.files("../../data/GSE229413_RAW") %>%
gsub(pattern = "_filtered_feature_bc_matrix.h5|_raw_feature_bc_matrix.h5|^GSM[0-9]*_", replacement = "")
samples_names
samples_names
sapply(samples_names, function(x){
dir.create(paste0("../../data/GSE229413_RAW/",x), showWarnings = F, recursive = T)
})
x
x <- samples_names[1]
paste0("../../data/GSE229413_RAW/",x)
dataDir <- "../../data/GSE229413_RAW/"
samples_names <- list.files(dataDir) %>%
gsub(pattern = "_filtered_feature_bc_matrix.h5|_raw_feature_bc_matrix.h5|^GSM[0-9]*_", replacement = "")
samples_names
files <- list.files(dataDir, pattern = x)
files
files <- list.files(dataDir, pattern = x, include.dirs = F)
files
files <- list.files(dataDir, pattern = x, include.dirs = F)
files
?list.files
files <- list.files(dataDir, pattern = x, include.dirs = F)
files
dir.create(paste0(dataDir,x), showWarnings = F, recursive = T)
?file.rename
files <- list.files(dataDir, pattern = x, include.dirs = F, full.names = )
files <- list.files(dataDir, pattern = x, include.dirs = F, full.names = T)
files
dir.create(paste0(dataDir,x), showWarnings = F, recursive = T)
file.rename(files, paste0(dataDir,x))
file.rename(from = files, to = paste0(dataDir,x))
files
sapply(files, file.rename(to = paste0(dataDir,x)))
sapply(files, function(x){file.rename(from = x, to = paste0(dataDir,x))})
files
y = files[1]
paste0(dataDir,x,"/",y)
dataDir
files <- list.files(dataDir, pattern = x, include.dirs = F, full.names = T)
files
dir.create(paste0(dataDir,"/",x), showWarnings = F, recursive = T)
sapply(files, function(y){file.rename(from = y, to = paste0(dataDir,"/",x,"/",y))})
y
file.path(dataDir,x,y)
x
samples_names
x
file.path(dataDir,x,y)
dataDir
file.path(y,x)
file.path(dataDir,x)
file.rename(from = y, to = file.path(dataDir,x))
dir.create(file.path(dataDir,x), showWarnings = F, recursive = T)
file.rename(from = y, to = file.path(dataDir,x))
files <- list.files(dataDir, pattern = x, include.dirs = F)
files
dir.create(file.path(dataDir,x), showWarnings = F, recursive = T)
file.path(dataDir,y)
y <- files[1]
y
file.path(dataDir,y)
file.path(dataDir,x,y)
sapply(files, function(y){file.rename(from = file.path(dataDir,y), to = file.path(dataDir,x,y))})
sapply(samples_names, function(x){
files <- list.files(dataDir, pattern = x, include.dirs = F)
dir.create(file.path(dataDir,x), showWarnings = F, recursive = T)
sapply(files, function(y){file.rename(from = file.path(dataDir,y), to = file.path(dataDir,x,y))})
})
files
dataDir <- "../../data/GSE229413_RAW/"
samples_names <- list.files(dataDir) %>%
gsub(pattern = "_filtered_feature_bc_matrix.h5|_raw_feature_bc_matrix.h5|^GSM[0-9]*_", replacement = "")
dataDir <- "../../data/GSE229413_RAW/"
samples_names <- list.files(dataDir) %>%
gsub(pattern = "_filtered_feature_bc_matrix.h5|_raw_feature_bc_matrix.h5|^GSM[0-9]*_", replacement = "")
samples_names
list.files(dataDir)
samples_names <- list.files(dataDir) %>%
gsub(pattern = "_filtered_feature_bc_matrix.h5|_raw_feature_bc_matrix.h5|^GSM[0-9]*_", replacement = "") %>% distinct()
samples_names <- list.files(dataDir) %>%
gsub(pattern = "_filtered_feature_bc_matrix.h5|_raw_feature_bc_matrix.h5|^GSM[0-9]*_", replacement = "") %>% unique()
samples_names
paste0(x,"_")
files <- list.files(dataDir, pattern = paste0(x,"_"), include.dirs = F)
sapply(samples_names, function(x){
files <- list.files(dataDir, pattern = paste0(x,"_"), include.dirs = F)
dir.create(file.path(dataDir,x), showWarnings = F, recursive = T)
sapply(files, function(y){file.rename(from = file.path(dataDir,y), to = file.path(dataDir,x,y))})
})
list.files("../../data/GSE229413_RAW")
samples_names <- list.files("../../data/GSE229413_RAW")
samples_dir <- list.files("../../data/GSE229413_RAW", full.names = T)
samples_dir
data_dir <- samples_dir[1]
data_dir
# importing libraries
library(Seurat)
library(SoupX)
library(dplyr)
library(tidyr)
filt.matrix <- Read10X_h5(list.files(data_dir, full.names = T, pattern = '_filtered_feature_bc_matrix.h5'),use.names = T)
list.files(data_dir, full.names = T, pattern = '_filtered_feature_bc_matrix.h5')
raw.matrix  <- Read10X_h5(list.files(data_dir, full.names = T, pattern = '_raw_feature_bc_matrix.h5'),use.names = T)
sc  <- SoupChannel(raw.matrix, filt.matrix)
seurat_obj <- Read10X_h5(list.files(data_dir, full.names = T, pattern = '_filtered_feature_bc_matrix.h5'),use.names = T)
seurat_obj <- CreateSeuratObject(seurat_obj)
seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
seurat_obj <- NormalizeData(seurat_obj, verbose = FALSE)
seurat_obj <- ScaleData(seurat_obj, verbose = FALSE)
seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(seurat_obj), verbose = FALSE)
seurat_obj <- FindNeighbors(seurat_obj, dims = 1:30, verbose = FALSE)
seurat_obj <- FindClusters(seurat_obj, resolution = 0.5, verbose = FALSE)
seurat_obj <- RunUMAP(seurat_obj, dims = 1:30, verbose = FALSE)
# addin clusters and DR to soupx object
clusters <- data.frame("clusters" = seurat_obj$seurat_clusters, row.names = colnames(seurat_obj))
umap <- as.data.frame(seurat_obj@reductions$umap@cell.embeddings)
sc = setClusters(sc, setNames(clusters$clusters, rownames(clusters)))
sc = setDR(sc, umap)
if (missing(rho)){
acinar_markers <- c('CTRB1','KLK1','RBPJL','PTF1A','CELA3A','PRSS1','SPINK1','ZG16','CEL','CELA2A','CPB1','CELA1','RNASE1','AMY2B','CPA2','CPA1','CELA3B','PNLIP','CTRB2','PLA2G1B','PRSS2','CLPS','REG1A','SYCN','PNLIPRP1','CTRC','REG3A','SERPINA3','PRSS3','REG1B','CFB','GDF15','MUC1','C15ORF48','DUOXA2','AKR1C3','OLFM4','GSTA1','LGALS2','PDZK1IP1','RARRES2','CXCL17','UBD','GSTA2','ANPEP','LYZ','ANGPTL4','ALDOB')
acinar_markers <- acinar_markers[acinar_markers %in% row.names(sc$toc)]
rbc_markers <- c('HEXA','AQP1','CCNA2','PKLR','LOX','ARG1','HBB','HBA1','HBA2','HBG1','HBG2','CEACAM1','CD36','GYPA','THBS1','ITGA4','GYPB','AHSP','HBM','FECH','EPOR','KIT','BPGM','DCAF12','HBD','HEMGN','HMBS','NCOA4','RBM38','UCP2','UBB','TMCC2','SLC4A1','SLC25A39','SLC25A37','FOSB','HTATSF1','EPB41','RSAD2','COX6B2','APOA1','ASNS','ALAD','S100A9','AHSG','S100A8','ERMAP','KCNN4','PAN3','PFAS','VAMP5','PNPO')
rbc_markers <- rbc_markers[rbc_markers %in% row.names(sc$toc)]
beta_markers <- c('GCGR','JPH3','CD40','HAMP','EZH1','NTRK1','PDX1','SLC2A2','NKX6-2','FXYD2','NPY','INS','RIMS1','MAFA','EFNA5','LMX1A','NKX2-2','NKX6-1','PAX4','IAPP','PCSK2','G6PC2','SLC30A8','PCSK1','GJD2','SCGN','IGF2','SYT13','FFAR2','NPTX2','PFKFB2','EDARADD','HOPX','SH3GL2','ADCYAP1','SCGB2A1','CASR','MAFB','PAX6','NEUROD1','ISL1','TGFBR3','SMAD9','SIX3','SIX2','BMP5','PIR','STXBP5','DLK1','MEG3','RGS16')
beta_markers <- beta_markers[beta_markers %in% row.names(sc$toc)]
nonExpressedGeneList = list(acinar_markers  = acinar_markers,
rbc_markers = rbc_markers,
beta_markers = beta_markers)
useToEst = estimateNonExpressingCells(sc, nonExpressedGeneList = nonExpressedGeneList)
sc = calculateContaminationFraction(sc, nonExpressedGeneList = nonExpressedGeneList, useToEst = useToEst)
print(paste0("The estimated contamination fraction is: ", round(sc$metaData$rho[1],3)))
if (missing(extra)){
note = "no extra value was added to the contamination fraction as it wasn't provided"
if (cap){
new_rho = min(sc$metaData$rho[1],0.2)
sc = setContaminationFraction(sc, new_rho)
out = adjustCounts(sc, roundToInt = T, verbose = F)
} else {out = adjustCounts(sc, roundToInt = T, verbose = F)}
} else {
new_rho = sc$metaData$rho[1]+extra
note = "added extra 10% to the contamination fraction as provided"
if (cap){
new_rho = min(new_rho,0.2)
sc = setContaminationFraction(sc, new_rho)
out = adjustCounts(sc, roundToInt = T, verbose = F)
} else {
sc = setContaminationFraction(sc, new_rho, forceAccept = T)
out = adjustCounts(sc, roundToInt = T, verbose = F)
}
}
# if (sc$metaData$rho[1] > 0.2) {
#   note = "no extra value was added to the contamination fraction, Contamination fraction is already high (> 20%)"
#   new_rho = min(sc$metaData$rho[1],0.2)
#   sc = setContaminationFraction(sc, new_rho)
#   out = adjustCounts(sc, roundToInt = T, verbose = F)
# } else {
# print(paste0("Adding ",extra," to the estimated fraction"))
# new_rho = sc$metaData$rho[1]+extra
# sc = setContaminationFraction(sc, new_rho)
# note = "added extra 10% to the contamination fraction as provided"
# out = adjustCounts(sc, roundToInt = T, verbose = F)
# }
} else {
sc = setContaminationFraction(sc, rho)
out = adjustCounts(sc, roundToInt = T, verbose = F)
note = "Contamination Fraction was provided by the user"
}
DimPlot(seurat_obj)
setwd("~/Gift-of-Life-Public-Repository/scripts/Spatial_Transcriptomics_Analysis")
list.files("../../data/GSE226829_RAW/", full.names = T, pattern = ".dcc$")
list.files("../../data/GSE226829_RAW/"()
)
list.files("../../data/GSE226829_RAW/")
DCCFiles <- list.files("../../data/GSE226829_RAW/", full.names = T, pattern = ".dcc.gz$")
pwd
DCCFiles <- list.files("../../data/GSE226829_RAW/", full.names = T, pattern = ".dcc.gz$")
DCCFiles
dccfilesDir <- "../../data/GSE226829_RAW/"
list.files(dccfilesDir, full.names = T)
sapply(list.files(dccfilesDir, full.names = T), gunzip)
library(R.utils)
?gunzip
sapply(list.files(dccfilesDir, full.names = T), gunzip, remove = T)
list.files(dccfilesDir)
DCCFiles <- list.files("../../data/GSE226829_RAW/", full.names = T, pattern = ".dcc$")
DCCFiles
gunzip("../../data/GSE226829_Hs_R_NGS_WTA_v1.0.pkc.gz", remove = T)
PKCFiles <- "../../data/GSE226829_Hs_R_NGS_WTA_v1.0.pkc.gz"
SampleAnnotationFile <- ("../../data/GSE226829_PreQC_segments_annotation.xlsx")
SampleAnnotationFile
readxl::read_xlsx(SampleAnnotationFile)
DCCFiles
newname <- sub('^GSM[0-9]*_','', list.files(dccfilesDir))
newname
list.files(dccfilesDir, full.names = T)
file.path(dccfilesDir, newname)
file.rename(list.files(dccfilesDir, full.names = T),
file.path(dccfilesDir, newname))
DCCFiles <- list.files("../../data/GSE226829_RAW/", full.names = T, pattern = ".dcc$")
DCCFiles
gunzip("../../data/GSE226829_Hs_R_NGS_WTA_v1.0.pkc.gz", remove = T)
PKCFiles <- "../../data/GSE226829_Hs_R_NGS_WTA_v1.0.pkc.gz"
SampleAnnotationFile <- ("../../data/GSE226829_PreQC_segments_annotation.xlsx")
ns_object <-
readNanoStringGeoMxSet(dccFiles = DCCFiles,
pkcFiles = PKCFiles,
phenoDataFile = SampleAnnotationFile,
phenoDataSheet = "sheet1",
phenoDataDccColName = "Sample_ID",
experimentDataColNames = c("panel"))
suppressPackageStartupMessages({
library(NanoStringNCTools)
library(GeomxTools)
library(GeoMxWorkflows)
library(ggthemes)
library(ggiraph)
library(pheatmap)
library(tidyverse)
library(knitr)
library(dplyr)
library(ggforce)
library(ggplot2)
library(cowplot)
library(scales)
library(reshape2)
library(limma)
library(umap)
library(Rtsne)
library(ggrepel)
library(readxl)
library(RColorBrewer)
library(writexl)
library(PCAtools)
library(fgsea)
library(org.Hs.eg.db)
library(clusterProfiler)
library(VennDiagram)
library(R.utils)
source("../../src/geomx_utils.R")
})
ns_object <-
readNanoStringGeoMxSet(dccFiles = DCCFiles,
pkcFiles = PKCFiles,
phenoDataFile = SampleAnnotationFile,
phenoDataSheet = "sheet1",
phenoDataDccColName = "Sample_ID",
experimentDataColNames = c("panel"))
PKCFiles <- "../../data/GSE226829_Hs_R_NGS_WTA_v1.0.pkc"
ns_object <-
readNanoStringGeoMxSet(dccFiles = DCCFiles,
pkcFiles = PKCFiles,
phenoDataFile = SampleAnnotationFile,
phenoDataSheet = "sheet1",
phenoDataDccColName = "Sample_ID",
experimentDataColNames = c("panel"))
ns_object <-
readNanoStringGeoMxSet(dccFiles = DCCFiles,
pkcFiles = PKCFiles,
phenoDataFile = SampleAnnotationFile,
phenoDataSheet = "Sheet 1",
phenoDataDccColName = "Sample_ID",
experimentDataColNames = c("panel"))
ns_object <-
readNanoStringGeoMxSet(dccFiles = DCCFiles,
pkcFiles = PKCFiles,
phenoDataFile = SampleAnnotationFile,
phenoDataSheet = "Sheet 1",
phenoDataDccColName = "library name",
experimentDataColNames = c("panel"))
ns_object <-
readNanoStringGeoMxSet(dccFiles = DCCFiles,
pkcFiles = PKCFiles,
phenoDataFile = SampleAnnotationFile,
phenoDataSheet = "Sheet 1",
phenoDataDccColName = "library name")
pkcs <- annotation(ns_object)
modules <- gsub(".pkc", "", pkcs)
count_mat <- dplyr::count(pData(ns_object), `slide name`, patient_id, cell_type)
test_gr <- gather_set_data(count_mat, 1:3)
test_gr$x <- factor(test_gr$x,
levels = c("scan name","patient_id", "main_label"))
## QC
ns_object <- runQC(ns_object, stringent = TRUE)
View(runQC)
debug(runQC)
## QC
ns_object <- runQC(ns_object, stringent = TRUE)
pData(ns_object)$sample
pData(ns_object)$patient_id
pData(ns_object)$sample <- pData(ns_object)$patient_id
pData(ns_object)$tissue <- paste(pData(ns_object)$patient_id, pData(ns_object)$Location, sep = "_")
count_mat <- dplyr::count(pData(ns_object), `slide name`, patient_id, cell_type)
test_gr <- gather_set_data(count_mat, 1:3)
test_gr$x <- factor(test_gr$x,
levels = c("scan name","patient_id", "main_label"))
## QC
ns_object <- runQC(ns_object, stringent = TRUE)
undebug(runQC)
dim(ns_object)
pData(ns_object)$location
pData(ns_object)$Location
pData(ns_object)$DiseaseStatus
paste0(pData(ns_object)$DiseaseStatus,"_",pData(ns_object)$cell_type)
unique(paste0(pData(ns_object)$DiseaseStatus,"_",pData(ns_object)$cell_type))
pData(ns_object)$celltype_DS <- paste0(pData(ns_object)$cell_type,"_",pData(ns_object)$DiseaseStatus)
unique(pData(ns_object)$celltype_DS)
dim(ns_object)
## Removing "ADM_Tumor" due to low power
ns_object <- ns_object[,pData(ns_object)$celltype_DS != 'ADM_Tumor']
dim(ns_object)
## Data Summary
## Plot
count_mat <- dplyr::count(pData(ns_object), patient_id, cell_type)
test_gr <- gather_set_data(count_mat, 1:2)
test_gr$x <- factor(test_gr$x,
levels = c("patient_id","cell_type"))
count_mat <- dplyr::count(pData(ns_object), `slide name`, patient_id,DiseaseStatus, cell_type)
test_gr <- gather_set_data(count_mat, 1:4)
test_gr$x <- factor(test_gr$x,
levels = c("slide name","patient_id", "DiseaseStatus", "cell_type"))
ggplot(test_gr, aes(x, id = id, split = y, value = n)) +
geom_parallel_sets(aes(fill = cell_type), alpha = 0.5, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.3) +
geom_parallel_sets_labels(color = "white", size = 4, angle = 0) +
theme_classic(base_size = 17) +
theme(legend.position = "bottom",
axis.ticks.y = element_blank(),
axis.line = element_blank(),
axis.text.y = element_blank()) +
# axis.text.x = element_blank(),
# axis.ticks.x = element_blank()) +
scale_y_continuous(expand = expansion(0)) +
scale_x_discrete(expand = expansion(0)) +
labs(x = "", y = "")
test_gr
count_mat <- dplyr::count(pData(ns_object), `slide name`, patient_id,DiseaseStatus, cell_type)
test_gr <- gather_set_data(count_mat, 1:4)
test_gr
test_gr$x <- factor(test_gr$x,
levels = c("slide name","patient_id", "DiseaseStatus", "cell_type"))
test_gr
count_mat <- dplyr::count(pData(ns_object), `slide name`, patient_id,DiseaseStatus, cell_type)
test_gr <- gather_set_data(count_mat, 1:4)
View(test_gr)
factor(test_gr$x,
levels = c("slide name","patient_id", "DiseaseStatus", "cell_type"))
test_gr$x
factor(test_gr$x)
factor(test_gr$x, labels = c("slide name","patient_id", "DiseaseStatus", "cell_type"))
test_gr$x <- factor(test_gr$x, labels = c("slide name","patient_id", "DiseaseStatus", "cell_type"))
test_gr
ggplot(test_gr, aes(x, id = id, split = y, value = n)) +
geom_parallel_sets(aes(fill = cell_type), alpha = 0.5, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.3) +
geom_parallel_sets_labels(color = "white", size = 4, angle = 0) +
theme_classic(base_size = 17) +
theme(legend.position = "bottom",
axis.ticks.y = element_blank(),
axis.line = element_blank(),
axis.text.y = element_blank()) +
# axis.text.x = element_blank(),
# axis.ticks.x = element_blank()) +
scale_y_continuous(expand = expansion(0)) +
scale_x_discrete(expand = expansion(0)) +
labs(x = "", y = "")
## Normalization
ns_object <- normalize(ns_object,
norm_method = "quant",
desiredQuantile = .75,
toElt = "q_norm")
assayDataElement(object = ns_object, elt = "log_q") <-
assayDataApply(ns_object, 2, FUN = log, base = 2, elt = "q_norm")
calc_CV <- function(x) {sd(x) / mean(x)}
CV_dat <- assayDataApply(ns_object,
elt = "log_q", MARGIN = 1, calc_CV)
CV_dat <- sort(CV_dat, decreasing = TRUE)
# Identify genes in the top 3rd of the CV values
GOI <- names(CV_dat)[CV_dat > quantile(CV_dat, 0.8)]
# PCA
getPalette <- colorRampPalette(brewer.pal(9, "Set1"))
pre_pca <- pca(mat = assayDataElement(object = ns_object[GOI,], elt = "log_q"),
metadata = pData(ns_object))
pre <- biplot(pre_pca, showLoadings = F, boxedLoadingsNames = T,
colby = 'cell_type', lab = pData(ns_object)$Sample, shape = 'patient_id',
# colkey = c(Acinar = 'red', Duct = 'magenta', ADM = 'darkgreen', PanIN = 'navy'),
title = "pre batch correction", subtitle = NULL,
labSize = 0, pointSize = 2, drawConnectors = F,
legendPosition = 'right',
legendLabSize = 7, legendIconSize = 4, legendTitleSize = 10,
encircle = T, encircleAlpha = 0.15)
assayDataElement(object = ns_object, elt = "limma_corrected_log_q") <-
limma::removeBatchEffect(assayDataElement(object = ns_object, elt = "log_q"),
batch = pData(ns_object)$tissue,
design = model.matrix( ~ cell_type, data= pData(ns_object)))
limma_cor_pca <- pca(mat = assayDataElement(object = ns_object[GOI,], elt = "limma_corrected_log_q"),
metadata = pData(ns_object))
limma_post <- biplot(limma_cor_pca, showLoadings = F, boxedLoadingsNames = T,
colby = 'cell_type', lab = pData(ns_object)$Sample, shape = 'patient_id',
# colkey = c(Acinar = 'red', Duct = 'magenta', ADM = 'darkgreen', PanIN = 'navy'),
title = "post batch correction", subtitle = NULL,
labSize = 0, pointSize = 2, drawConnectors = F,
legendPosition = 'right',
legendLabSize = 7, legendIconSize = 4, legendTitleSize = 10,
encircle = T, encircleAlpha = 0.15)
## FOR LATER MAKE IT INTERACTIVE ##
limma_post <- biplot(limma_cor_pca, showLoadings = F, boxedLoadingsNames = T,
colby = 'cell_type', lab = pData(ns_object)$roi, shape = "sample",
title = "post batch correction", subtitle = NULL,
labSize = 5, pointSize = 3, drawConnectors = T,
legendPosition = 'right', colkey = getPalette(colourCount),
legendLabSize = 7, legendIconSize = 4, legendTitleSize = 10,
encircle = T, encircleAlpha = 0.15)
cowplot::plot_grid(pre, limma_post)
## FOR LATER MAKE IT INTERACTIVE ##
limma_post <- biplot(limma_cor_pca, showLoadings = F, boxedLoadingsNames = T,
colby = 'cell_type', lab = pData(ns_object)$roi, shape = "sample",
title = "post batch correction", subtitle = NULL,
labSize = 5, pointSize = 3, drawConnectors = T,
legendPosition = 'right',,
legendLabSize = 7, legendIconSize = 4, legendTitleSize = 10,
encircle = T, encircleAlpha = 0.15)
cowplot::plot_grid(pre, limma_post)
cowplot::plot_grid(pre, limma_post)
cowplot::plot_grid(pre, limma_post)
pan_markers <- extract_pan_markers(ns_object = ns_object, group = "cell_type_DS",
grouping_var = "tissue",
pCutOff = 1, fcCutOff = -Inf)
pData(ns_object)$tissue <- paste(pData(ns_object)$patient_id, pData(ns_object)$Location, sep = "_")
pData(ns_object)$tissue
pan_markers <- extract_pan_markers(ns_object = ns_object, group = "cell_type_DS",
grouping_var = "tissue",
pCutOff = 1, fcCutOff = -Inf)
debug(extract_pan_markers)
debug(extract_pan_markers)
pan_markers <- extract_pan_markers(ns_object = ns_object, group = "cell_type_DS",
grouping_var = "tissue",
pCutOff = 1, fcCutOff = -Inf)
pan_markers <- extract_pan_markers(ns_object = ns_object, group = "cell_type_DS",
grouping_var = "tissue",
pCutOff = 1, fcCutOff = -Inf)
markers
pan_markers <- extract_pan_markers(ns_object = ns_object, group = "cell_type_DS",
grouping_var = "tissue",
pCutOff = 1, fcCutOff = -Inf)
as.character(unique(pData(ns_object)[[group]]))
ns_object
group
pData(ns_object)[[group]]
pData(ns_object)
undebug(extract_pan_markers)
pData(ns_object)$cell_type_DS <- paste0(pData(ns_object)$cell_type,"_",pData(ns_object)$DiseaseStatus)
pan_markers <- extract_pan_markers(ns_object = ns_object, group = "cell_type_DS",
grouping_var = "tissue",
pCutOff = 1, fcCutOff = -Inf)
annot_df <- data.frame(cell_type = pData(ns_object)$cell_type_DS, row.names = colnames(ns_object))
annot_df
annot_df <- data.frame(cell_type = pData(ns_object)$cell_type_DS, row.names = colnames(ns_object))
annot_df$cell_type <- factor(annot_df$cell_type)
